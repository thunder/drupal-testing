#!/usr/bin/env bash

set -o errexit
set -o pipefail
set -o nounset

### Functions ###

# Output help to console.
show_help() {
    cat <<EOF
Usage:   ${0##*/} [-h|--help] [-nc|--no-cleanup] [STAGE]
Run tests for a drupal project (module, ditribution or full project). This has to be called from the projects folder.
It builds a drupal installation and runs all tests that are defined in the projects directory.
You can run this multiple times with different stages, already executed stages will not be called
again until run_tests stage has finished. After run_tests everything will be cleaned up, and another
run would start from scratch.

Parameter:
    STAGE                    The test stage to execute, defaults to run_test (all stages are executed).
                             If a stage depends on other stages, they will be automatically called.
                             Possible values: requirements, coding_style, prepare_build, build,
                             install, start_services, run_tests
Options:
    -h,  --help              Display this help.
    -nc, --no-cleanup        Do not cleanup after successful tests. Set this option to keep the installation.
    -co, --clean-only        Just run cleanup and exit.

Example:
    test-drupal-module               Run everything.
    test-drupal-module coding_style  Just test coding style.
    test-drupal-module build         Build the projects docroot, but does not install or test yet.
EOF
}

# Get exact location of script.
get_script_dir() {
    local dir
    local source="${BASH_SOURCE[0]}"

    # resolve $source until the file is no longer a symlink
    while [[ -L ${source} ]]; do
        dir="$(cd -P "$(dirname "${source}")" && pwd)"
        source="$(readlink "$source")"

        # if $source was a relative symlink, we need to resolve it relative to the path where the symlink file was located
        [[ ${source} != /* ]] && source="${dir}/${source}"
    done
    cd -P "$(dirname "${source}")" && pwd
}
### Parse command arguments ###

for i in "${@}"; do
    case ${i} in
    -h | -\? | --help)
        show_help
        exit
        ;;
    -co | --clean-only)
        clean_only=true
        ;;
    -nc | --no-cleanup)
        DRUPAL_TESTING_CLEANUP=false
        ;;
    -v)
        export DRUPAL_TESTING_VERBOSE=true
        set -o xtrace
        ;;
    -?*)
        printf "Unknown option: %s\n" "${i}"
        show_help
        exit 1
        ;;
    *)
        # last option has to be the test stage
        DRUPAL_TESTING_TEST_STAGE=${i}
        ;;
    esac
done

### Fallback values ###

DRUPAL_TESTING_TEST_STAGE=${DRUPAL_TESTING_TEST_STAGE:-run_tests}
SCRIPT_DIR=$(get_script_dir)

### Source required files ###
# shellcheck source=/dev/null
source "${SCRIPT_DIR}/../configuration.sh"

for library in "${SCRIPT_DIR}"/../lib/*.sh; do
    # shellcheck source=/dev/null
    source "${library}"
done

if ${clean_only:-false}; then
    clean_up
    exit
fi

### Run stage ###

cd "${DRUPAL_TESTING_PROJECT_BASEDIR}" || exit

if ! stage_exists "${DRUPAL_TESTING_TEST_STAGE}"; then
    printf "Unknown stage '%s'\n\n" "${1}"
    show_help
    exit 1
fi

run_stage "${DRUPAL_TESTING_TEST_STAGE}"

if ! stage_is_finished "run_tests"; then
    exit
fi

# After run_tests, we either cleanup, or revert the run_tests stage.
if ${DRUPAL_TESTING_CLEANUP}; then
    clean_up
else
    reset_stage "run_tests"
fi
